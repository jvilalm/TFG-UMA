# -*- coding: utf-8 -*-
"""EDA_TFG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LlbRSiXXWjuXsdH9wj84PdHtk5F0rCro

#**EDA**

El presente análisis exploratorio tiene como objetivo comprender la estructura y las características del conjunto de datos VREN, centrado en jugadas de voleibol. Se analizan variables relacionadas con zonas de recepción, golpeo, tipos de jugada y resultados, con el fin de identificar patrones relevantes que puedan apoyar la toma de decisiones tácticas o el desarrollo de modelos predictivos.
"""
import matplotlib
matplotlib.use('TkAgg')  # Use a compatible backend

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import seaborn as sns

# Cargar imagen de campo completo y campo dividido en mitades
img_field = mpimg.imread('./Zonas Voleibol.png')
img_field_half = mpimg.imread('./Zonas Voleibol_mitad.png')
df = pd.read_csv("./dataset_full.csv", delimiter=',')

#Mostrar Imagen con las zonas
"""plt.imshow(img_field)
plt.title('División de Zonas')
plt.axis('off')
plt.show()
"""
"""El dataset cuenta con 2.429 registros y 18 columnas. Las variables incluyen posiciones (ej. `hitter_location`, `receive_location`), descripciones de jugadas (`hit_type`, `pass_rating`), y resultado del rally (`winning_team`, `win_reason`).

Se identificaron valores nulos en columnas como `serve_type`, `hit_land_location`, `block_touch`, y `set_location`.

## Zonas de Recepción

La variable `receive_location` representa la zona en la que el jugador defensor realiza la recepción del balón.
"""

filtered_df = df[df['receive_location'].notna()]
# Calcular el porcentaje de uso por zona de recepción (receive_location)
receive_location_percentages = filtered_df['receive_location'].dropna().astype(int).value_counts(normalize=True).sort_index() * 100
top_4_receive = receive_location_percentages.sort_values(ascending=False).head(4)
print("Las 4 zonas con mayor porcentaje de recepciones son:")
for zona, porcentaje in top_4_receive.items():
    print(f"Zona {zona}: {porcentaje:.1f}%")

"""### Histograma Frecuencia de Zonas de Recepción"""

# Aplicamos un color diferente para las 4 zonas con mayor porcentaje
colors = ['orange' if zone in top_4_receive.index else 'skyblue' for zone in receive_location_percentages.index]
# Crear histograma (barras) con porcentajes
plt.figure(figsize=(10, 6))
receive_location_percentages.plot(kind='bar',color = colors)
# Personalizar gráfico
plt.title('Porcentaje de Zonas de Recepción (receive_location)')
plt.xlabel('Zona de Recepción')
plt.ylabel('Porcentaje (%)')
plt.xticks(rotation=0)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

"""De la misma forma la variable

## Zona de Recepción del Pase

La variable `pass_land_location` representa la zona del campo en la que aterriza el pase recibido tras la acción de recepción o defensa. Normalmente este pase va dirigido al colocador del equipo.
"""

# Eliminar valores nulos
pass_locs = df['pass_land_location'].dropna().astype(int)

# Calcular porcentaje por zona
percentages_pass_locs = pass_locs.value_counts(normalize=True).sort_index() * 100
# Cogemos las 4 zonas con mayor porcentaje
top_4_zones = percentages_pass_locs.sort_values(ascending=False).head(4)
# Imprimir resultado
print("Las 4 zonas con mayor porcentaje de pases recibidos son:")
for zona, porcentaje in top_4_zones.items():
    print(f"Zona {zona}: {porcentaje:.1f}%")

"""De esta columna depende la variable `pass_rating`. Si el pase llega dentro de las zonas 11, 12 o 13 estaremos hablando de un buen pase para el colocador (in) y si aterriza en cualquier otra zona será un pase difícil para el colocador (out)."""

#
pass_rating = df['pass_rating'].dropna()

pass_rating_percent = pass_rating.value_counts(normalize=True).sort_index() * 100
pass_rating_percent = pass_rating_percent.round(2)

# Preparar resultados para mostrar
pass_rating_summary = pd.DataFrame({
    'Porcentaje (%)': pass_rating_percent,
    'Cantidad': pass_rating.value_counts()
})
print(pass_rating_summary)

"""### Histograma Zona de Recepción del Pase"""

# Crear histograma (barras) con porcentajes
colors1 = ['orange' if zone in top_4_zones else 'skyblue' for zone in percentages_pass_locs.index]
plt.figure(figsize=(10, 6))
percentages_pass_locs.plot(kind='bar',color = colors1)

# Personalizar gráfico
plt.title('Porcentajes Zonas de Recepción de Pase (pass_land_location)')
plt.xlabel('Zona')
plt.ylabel('Porcentaje (%)')
plt.xticks(rotation=0)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

"""Observamos como la **zona 13** es en la que se recibe un mayor número de pases ya que es la posición que en la que se va a ubicar habitualmente el **colocador** del equipo.

## Zonas de Remate

La variable `hitter_location` representa la zona del campo en la que el rematador golpea el balón.
"""

hit_loc = df['hitter_location'].dropna().astype(int)
hit_loc_percent = hit_loc.value_counts(normalize=True).sort_index() * 100
top_4_hit_loc = hit_loc_percent.sort_values(ascending=False).head(4)

print("Las 4 zonas con mayor cantidad de golpes son:")
for zona, porcentaje in top_4_hit_loc.items():
    print(f"Zona {zona}: {porcentaje:.1f}%")

colors2 = ['orange' if zone in top_4_hit_loc.index else 'skyblue' for zone in hit_loc_percent.index]
# Crear histograma con todas las zonas de golpeo (hitter_location) en el eje x
plt.figure(figsize=(10, 6))
hit_loc_percent.sort_index().plot(kind='bar',color = colors2)

plt.title('Porcentajes de Zonas de Remate (hitter_location)')
plt.xlabel('Zona de Remate')
plt.ylabel('Porcentaje (%)')
plt.xticks(rotation=0)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

"""Podemos observar como la zona 15 es desde donde se realiza el mayor porcentaje de los remates, ya que normalmente los rematadores más eficaces de cada equipo se colocan en esa zona (lado izquierdo pegado a la red).

### HeatMap Zonas de Remate
"""

# Calcular porcentajes en lugar de totales
filtered_hits = df['hitter_location'].dropna().astype(int)
filtered_hits = filtered_hits[filtered_hits <= 15]
total_hits = len(filtered_hits)

# Crear una matriz 3x5 con la disposición deseada
# Fila 1: [15, 14, 13, 12, 11]
# Fila 2: [10,  9,  8,  7,  6]
# Fila 3: [ 5,  4,  3,  2,  1]
zone_order = [
    [15, 14, 13, 12, 11],
    [10,  9,  8,  7,  6],
    [ 5,  4,  3,  2,  1]
]


# Recalcular frecuencia relativa (porcentaje)
percent_counts = filtered_hits.value_counts(normalize=True).sort_index() * 100

# Crear matriz 3x5 con porcentajes
heatmap_percent = np.array([
    [percent_counts.get(zone, 0) for zone in row] for row in zone_order
])

# Crear anotaciones personalizadas con % + número de zona
annotations_percent = np.array([
    [f"{heatmap_percent[i][j]:.1f}%\n({zone_order[i][j]})" for j in range(5)]
    for i in range(3)
])

# Dibujar heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(
    heatmap_percent,
    annot=annotations_percent,
    fmt="",
    cmap="YlGnBu",
    linewidths=.5,
    cbar_kws={"label": "Porcentaje (%)"}
)

# Etiquetas
plt.title("Heatmap de Zonas de Remate (Mitad del Campo)")
plt.tight_layout()
plt.show()

#Mostrar Imagen con las zonas
plt.imshow(img_field_half)
plt.axis('off')
plt.show()

"""## Tipo de Saque

La variable `serve_type` indica el tipo de saque que realiza el equipo al que le toca realizar el mismo.
"""

# Eliminar valores nulos en la columna serve_type
serve_data = df['serve_type'].dropna()

# Calcular el total de saques
total_saques = serve_data.shape[0]

# Calcular porcentaje por tipo de saque
serve_percentages = serve_data.value_counts(normalize=True) * 100
serve_percentages = serve_percentages.round(1)

# Preparar resultados para mostrar
serve_summary = pd.DataFrame({
    'Porcentaje (%)': serve_percentages,
    'Cantidad': serve_data.value_counts()
})
print(serve_summary)

"""Sobresale el saque con salto que es característico por ser un saque potente y rápido."""